<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ashes</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 26 Mar 2018 15:38:32 +0800</pubDate>
    <lastBuildDate>Mon, 26 Mar 2018 15:38:32 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>ffmpeg命令</title>
        <description>&lt;h3 id=&quot;mediainfo-software-mediainfohttpsmediaareanetenmediainfodownloadubuntu&quot;&gt;mediainfo software新发现 &lt;a href=&quot;https://mediaarea.net/en/MediaInfo/Download/Ubuntu&quot;&gt;MediaInfo&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;一些参数详解&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Codec ID: mp42 isom&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Format profile: High@L3.1 High@L4.0&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Codec settings: CABAC / 4 Ref Frames ; CABAC / 5 Ref Frames&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ffmpeg&quot;&gt;ffmpeg命令&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;视频旋转&lt;/li&gt;
  &lt;li&gt;视频宽高&lt;/li&gt;
  &lt;li&gt;打水印&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;压缩&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gt() 大于, gte() 大于等于, lt() 小于 and lte() 小于等于&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ffmpeg&lt;a href=&quot;https://www.gitbook.com/book/xdsnet/other-doc-cn-ffmpeg/details&quot;&gt;中文文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ffmpeg&lt;a href=&quot;https://xdsnet.gitbooks.io/other-doc-cn-ffmpeg/content/ffmpeg-doc-cn-08.html&quot;&gt;表达式计算/求值&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ffmpeg 码率 帧率&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;码率一般指比特率，比特率是指每秒传送的比特(bit)数。单位为 bps(Bit Per Second)，比特率越高，传送数据速度越快。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;帧率每秒显示帧数。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ffmpeg overlay用法 &lt;a href=&quot;https://ffmpeg.org/ffmpeg-filters.html#Commands-15&quot;&gt;filters中用法&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  overlay=x=&#39;if(gte(t,2), -w+(t-2)*20, NAN)&#39;:y=0

  lte(x, y)
  返回x&amp;lt;=y判断式值，符合为1，否则为0

  gte(x, y)
  返回判断x&amp;gt;=y的结果，符合则为1，否则为0

  if(x, y)
  判断x值，如果x值为非0，则返回y，否则返回0

  if(x, y, z)
  判断x值，如果x值为非0，则返回y，否则返回z.
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python-text-img&quot;&gt;python text-&amp;gt;img&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PIL&lt;a href=&quot;http://pillow.readthedocs.io/en/latest/index.html&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一些概念&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;RGBA是代表Red（红色） Green（绿色） Blue（蓝色）和 Alpha的色彩空间，也就是透明度/不透明度。0x80是128，大约是255的一半，A为128即为50%透明度&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def text2line(text, font, special_padding, ch, width=466, 
      rightpadding=12, 
      leftpadding=12):
      REPLACEMENT_CHARACTER = u&#39;\uFFFD&#39;

      lines = []
      line = u&quot;&quot;
      sencond_flag = 0

      if not ch:
          text_list = text.split()
      else:
          text_list = text

      for word in text_list:
          if not ch:
              word = word + &#39; &#39;
              rightpadding = 0

          if word == REPLACEMENT_CHARACTER:
              lines.append(line)
              sencond_flag = 1
              line = u&quot;&quot;
              print line, lines
          elif sencond_flag == 0 and font.getsize(line + word)[0] &amp;lt;= 
                  (width - rightpadding - leftpadding):
              line += word
              sencond_flag = 1
          elif sencond_flag == 1 and font.getsize(line + word)[0] &amp;lt;= 
                  (width - rightpadding - leftpadding - special_padding):
              line += word
          else:
              lines.append(line)
              line = u&quot;&quot;

              line += word

      if len(line) != 0:
          lines.append(line[:])  # add the last line
      line_height = font.getsize(text)[1] + 5
      img_height = line_height * (len(lines))

      return img_height, line_height, lines
  ------------------------------------------------------------------

  from PIL import Image, ImageDraw, ImageFont
  # 在图上写字
  font = ImageFont.truetype(&quot;/home/arial.ttf&quot;, 47)
  img = Image.open(&quot;/home/first-bar.png&quot;)
  draw = ImageDraw.Draw(img)
  draw.text((240, 0), word_name, &#39;#ffffff&#39;, font=font)
  # img.show()
  ret_path = &#39;/home/1.png&#39;
  img.save(ret_path)
	
  # 新建空白图片写字
  font = ImageFont.truetype(&quot;/home/pingfang.ttf&quot;, 24)
  img = Image.new(&quot;RGBA&quot;, (466, 52), (0, 0, 0, 20))
  draw = ImageDraw.Draw(img)
  draw_text = &quot;test&quot;
  draw.text((12, 5), unicode(draw_text,&#39;utf-8&#39;), &quot;#FFFFFF&quot;, font=font)
  # img.show()
  ret_path = &#39;/home/2.png&#39;
  img.save(ret_path)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 14 Mar 2018 10:30:00 +0800</pubDate>
        <link>/jekyll/update/2018/03/14/ffmpeg.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/14/ffmpeg.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>flutter</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;安装&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;git clone -b beta https://github.com/flutter/flutter.git&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;export PATH=&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;/flutter/bin:$PATH&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;flutter doctor (检测安装依赖程序)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 10 Mar 2018 09:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/03/10/flutter.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/10/flutter.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>MQ</title>
        <description>&lt;h1 id=&quot;mqmessage-queue&quot;&gt;MQ即Message Queue&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;部分MQ中有延迟执行(定时执行的功能). 如果时效性要求不高的话可以用crontab，每5分钟执行一次落在该时间内的任务(用cache实现)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nsq&quot;&gt;nsq&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;nsq中延迟执行最长为1小时后，关键字defer(deferred), MaxReqTimeout==1hour&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 09:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/03/10/mq.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/10/mq.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>算法</title>
        <description>&lt;h1 id=&quot;goodshttpsalgorithmyuanbinmezh-hansbasicsdatastructurelinkedlisthtml&quot;&gt;算法 &lt;a href=&quot;https://algorithm.yuanbin.me/zh-hans/basics_data_structure/linked_list.html&quot;&gt;goods&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;httpswwwcnblogscomonepixelarticles7674659html&quot;&gt;排序 &lt;a href=&quot;https://www.cnblogs.com/onepixel/articles/7674659.html&quot;&gt;示例&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;快速排序&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 递归
def	qsort(L):
	if len(L) &amp;lt; 2:
		return L

	return qsort([lt for lt in L[1:] if lt &amp;lt; L[0]]) + L[0:1] + qsort(gt for gt in L[1:] if gt &amp;gt;= L[0])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;httpswwwcnblogscomyw09041432p5908444html&quot;&gt;查找 &lt;a href=&quot;https://www.cnblogs.com/yw09041432/p/5908444.html&quot;&gt;示例&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;顺序查找&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;顺序查找的时间复杂度为O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;二分查找&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # 递归
  def bisect(a_list, n):
      low = 0
      high = len(a_list)
      mid = (low+high)//2
      if a_list[mid] &amp;lt; n:
          bisect(a_list[mid+1:high], n)
      elif a_list[mid] &amp;gt; n:
          bisect(a_list[low:high], n)
      else:
          return mid


  # 非递归
  def bisect(a_list, n):
      low = 0
      high = len(a_list)
      while low &amp;lt; high:
          mid = (low+high)//2
          if a_list[mid] == n:
              return mid
          elif a_list[mid] &amp;lt; n:
              low = mid + 1
          else:
              high = mid
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;插值查找&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;改进 mid = (low+high)/2 为 mid=low+1/2&lt;em&gt;(high-low) 即 mid=low+(key-a[low])/(a[high]-a[low])&lt;/em&gt;(high-low)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;数据结构&lt;/h1&gt;

&lt;h3 id=&quot;section-5&quot;&gt;二叉树&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Node():
	def __init__(self, item):
		self.item = item
		self.left = None
		self.right = None

class BinTree():
	def __init__(self):
		self.root = None

	def add(self, item):
		node = Node(item)
		if self.root is None:
			self.root = node
			return

		q = [self.root]
		while True:
			pop_node = q.pop(0)
			if pop_node.left is None:
				pop_node.left = node
				return

			if pop_node.right is None:
				pop_node.right = node
				return

			q.append(pop_node.left)
			q.append(pop_node.right)

	def traverse(self):
		if self.root is None:
			return []

		res = [self.root.item]
		q = [self.root]
		while q != []:
			pop_node = q.pop(0)
			if pop_node.left:
				q.append(pop_node.left)
				res.append(pop_node.left.item)

			if pop_node.right:
				q.append(pop_node.right)
				res.append(pop_node.right.item)

		return res

	def preorder(self, root):
		if root is None:
			return []

		f = [root.item]
		m = self.preorder(root.left)
		e = self.preorder(root.right)

		return f + m + e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 07 Mar 2018 10:40:35 +0800</pubDate>
        <link>/jekyll/update/2018/03/07/algorithm.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/07/algorithm.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>区块链</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;区块链书籍&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chaozh/awesome-blockchain&quot;&gt;github区块链总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/blockchain_guide/&quot;&gt;区块链技术指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/sNoZr_tWkULURcXfF6fUaA&quot;&gt;看完此文再不懂区块链算我输，用Python从零开始创建区块链&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bitcoin-on-nodejs.ebookchain.org/&quot;&gt;Node.js开发加密货币&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 06 Mar 2018 17:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/03/06/blockchain.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/06/blockchain.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>数据库设计及优化</title>
        <description>&lt;h3 id=&quot;mysql&quot;&gt;在MySQL中构建树结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;邻接表&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;comment_id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;parent_id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;author&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;comment&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NULL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Fran&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;这个bug的成因是什么&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;递归查询&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;路径枚举&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;嵌套集 &lt;a href=&quot;https://en.wikipedia.org/wiki/Nested_set_model&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;闭包表&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;管理MySQL中的分层数据 &lt;a href=&quot;http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/&quot;&gt;Managing Hierarchical Data in MySQL&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Mar 2018 16:30:00 +0800</pubDate>
        <link>/jekyll/update/2018/03/05/mysql.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/05/mysql.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>AI</title>
        <description>&lt;h3 id=&quot;google-mlhttpsdevelopersgooglecommachine-learningcrash-course&quot;&gt;google机器学习速成课程 &lt;a href=&quot;https://developers.google.com/machine-learning/crash-course/&quot;&gt;ML&lt;/a&gt;&lt;/h3&gt;

&lt;h1 id=&quot;tensorflow&quot;&gt;tensorflow安装&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/install/install_linux&quot;&gt;install_ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 15:40:35 +0800</pubDate>
        <link>/jekyll/update/2018/03/01/ai.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/03/01/ai.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>python</title>
        <description>&lt;h1 id=&quot;python&quot;&gt;python基础&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;py2于2019年底停止支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pythonstring-unicode-byteshttpwwwcnblogscomonepixelarticles7357273html&quot;&gt;python中的string unicode bytes&lt;a href=&quot;http://www.cnblogs.com/onepixel/articles/7357273.html&quot;&gt;示例&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;unicode是字符集：为每一个「字符」分配一个唯一的 ID&lt;/li&gt;
  &lt;li&gt;utf8是编码规则: 字节序列的规则&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;python-obj--str&quot;&gt;python 时间obj–str转换&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;datetime转str&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  now = datetime.datetime.now()
  now_str = now.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;str转datetime&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  datetime.datetime.strptime(now_str, &quot;%Y-%m-%d %H:%M:%S&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;time转str&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  now = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;datetime转时间戳&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  t = time.mktime(now.timetuple())
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;时间戳转datetime&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  t = time.time()
  datetime.datetime.fromtimestamp(t)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python-generator&quot;&gt;python generator&lt;/h3&gt;
&lt;p&gt;通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。&lt;/p&gt;

&lt;p&gt;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）。&lt;/p&gt;

&lt;p&gt;要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;L = [x * x for x in range(10)]
L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
g = (x * x for x in range(10))
g
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x104feab40&amp;gt;

def my_gen():  
	n = 1  
	print(&#39;This is printed first&#39;)  
	# Generator function contains yield statements  
	yield n  

	n += 1  
	print(&#39;This is printed second&#39;)  
	yield n  

	n += 1  
	print(&#39;This is printed at last&#39;)  
	yield n  

for item in my_gen():  
	print(item) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;python-coroutine&quot;&gt;python coroutine&lt;/h3&gt;
&lt;p&gt;python协程 一图以蔽之 &lt;img src=&quot;https://awesome-tao.github.io/images/coroutine-simple.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def averager():
    total = 0
	count = 0
	average = None
	while True:
	    in_num = yield average
		count += 1
		total += in_num
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 15:40:35 +0800</pubDate>
        <link>/jekyll/update/2018/02/24/python.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/02/24/python.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>uwsgi操作</title>
        <description>&lt;h3 id=&quot;uwsgi&quot;&gt;uwsgi操作&lt;/h3&gt;
</description>
        <pubDate>Sat, 24 Feb 2018 15:40:35 +0800</pubDate>
        <link>/jekyll/update/2018/02/24/uwsgi.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/02/24/uwsgi.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>工具</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;一些好的工具&lt;/h3&gt;
&lt;p&gt;在线工具，代码运行 &lt;a href=&quot;https://www.bytelang.com/&quot;&gt;bytelang&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 15:40:35 +0800</pubDate>
        <link>/jekyll/update/2018/02/24/util.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/02/24/util.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
