<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ashes</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Jun 2018 09:44:12 +0800</pubDate>
    <lastBuildDate>Wed, 13 Jun 2018 09:44:12 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>django</title>
        <description>&lt;h1 id=&quot;httpsdocsdjangoprojectcomzh-hans20&quot;&gt;文档 https://docs.djangoproject.com/zh-hans/2.0/&lt;/h1&gt;

&lt;h1 id=&quot;django&quot;&gt;django&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;python -m django –version&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;django-admin startproject mysite&lt;/li&gt;
  &lt;li&gt;python manage.py migrate&lt;/li&gt;
  &lt;li&gt;python manage.py runserver&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python manage.py startapp polls&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;python manage.py makemigrations polls&lt;/li&gt;
  &lt;li&gt;python manage.py migrate&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python manage.py sqlmigrate polls 0001&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;python manage.py shell&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python manage.py createsuperuser&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;python manage.py test polls&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;解释&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DJANGO_ROOT&lt;/li&gt;
  &lt;li&gt;PROJECT_ROOT&lt;/li&gt;
  &lt;li&gt;SITE_NAME&lt;/li&gt;
  &lt;li&gt;STATIC_ROOT&lt;/li&gt;
  &lt;li&gt;MEDIA_ROOT&lt;/li&gt;
  &lt;li&gt;STATICFILES_DIRS&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PROJECT_TEMPLATES&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;DEFAULT_APPS&lt;/li&gt;
  &lt;li&gt;MIDDLEWARE&lt;/li&gt;
  &lt;li&gt;TEMPLATES&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;结构&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;参考 http://www.loonapp.com/blog/11/&lt;/li&gt;
  &lt;li&gt;https://github.com/Mischback/django-project-skeleton&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/twoscoops/django-twoscoops-project&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应该是django的用户信息在一个库中,这样所有app都可以共享用户名权限等信息&lt;/p&gt;

    &lt;p&gt;任一app(jie,wordbook)库中只存表相关的表,django信息尽量不存(可以实现?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;多数据库结构
  https://stackoverflow.com/questions/18547468/multiple-databases-and-multiple-models-in-django&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 09 Jun 2018 09:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/06/09/django.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/06/09/django.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>flutter</title>
        <description>&lt;h3 id=&quot;tips&quot;&gt;tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://flutterchina.club/setup-linux/&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;git clone -b beta https://github.com/flutter/flutter.git&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;export PATH=&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;/flutter/bin:$PATH&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;flutter doctor (检测安装依赖程序)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;*&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tips-1&quot;&gt;tips&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;应用程序继承 StatelessWidget，这将会使应用本身也成为一个widget。 在Flutter中，大多数东西都是widget，包括对齐(alignment)、填充(padding)和布局(layout)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scaffold 是 Material library 中提供的一个widget, 它提供了默认的导航栏、标题和包含主屏幕widget树的body属性。widget树可以很复杂。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;widget的主要工作是提供一个build()方法来描述如何根据其他较低级别的widget来显示自己。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  void main() =&amp;gt; runApp(new MyApp());
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现一个 stateful widget 至少需要两个类&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;一个 StatefulWidget类。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;一个 State类。 StatefulWidget类本身是不变的，但是 State类在widget生命周期中始终存在.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stateless widgets 是不可变的, 这意味着它们的属性不能改变 - 所有的值都是最终的.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stateful widgets 持有的状态可能在widget生命周期中发生变化. 实现一个 stateful widget 至少需要两个类:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;一个 StatefulWidget类。&lt;/li&gt;
      &lt;li&gt;一个 State类。 StatefulWidget类本身是不变的，但是 State类在widget生命周期中始终存在.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 31 May 2018 19:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/31/flutter.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/31/flutter.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>linux</title>
        <description>&lt;h1 id=&quot;htpasswd&quot;&gt;htpasswd&lt;/h1&gt;
</description>
        <pubDate>Thu, 31 May 2018 09:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/31/linux.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/31/linux.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>elasticsearch</title>
        <description>&lt;h1 id=&quot;elasticsearch&quot;&gt;elasticsearch&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;detail &lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/current/_tutorial_conclusion.html&quot;&gt;文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;python &lt;a href=&quot;https://elasticsearch-py.readthedocs.io/en/master/api.html&quot;&gt;api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inverted-index&quot;&gt;倒排索引 Inverted index&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;一个未经处理的数据库中，一般是以文档ID作为索引，以文档内容作为记录。 而Inverted index 指的是将单词或记录作为索引，将文档ID作为记录，这样便可以方便地通过单词或记录查找到其所在的文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;relational-db---databases---tables---rows---columns&quot;&gt;Relational DB -&amp;gt; Databases -&amp;gt; Tables -&amp;gt; Rows -&amp;gt; Columns&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;关系型数据库       数据库             表              行                列
Elasticsearch -&amp;gt; Indices   -&amp;gt; Types  -&amp;gt; Documents -&amp;gt; Fields
Elasticsearch      索引               类型        文档                 域（字段）

es没有事务
没有授权认证
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tips&quot;&gt;操作tips&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;删除所有索引&lt;/p&gt;

    &lt;p&gt;curl -XDELETE http://localhost:9200/_all&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一次删除多个索引&lt;/p&gt;

    &lt;p&gt;curl -XDELETE http://localhost:9200/index_a,index_b&lt;/p&gt;

    &lt;p&gt;为了安全起见，可以在配置文件中设置禁用_all和*通配符&lt;/p&gt;

    &lt;p&gt;action.destructive_requires_name = true&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考 https://blog.csdn.net/YHYR_YCY/article/details/78882011&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 31 May 2018 09:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/31/elasticsearch.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/31/elasticsearch.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>高并发的一些问题</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;高并发抽奖&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;考虑在抽奖之前先用随机算法生成一批中奖候选人. 然后当用户请求过来时如果其中绝大多数请求都非中奖候选人，则直接返回抽奖失败，不走抽奖拿奖品的流程。少部分用户请求是中奖候选人，则进入队列，排在队列前面的获得奖品，发完为止，先到先得&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 19 May 2018 15:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/19/high-concurrency.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/19/high-concurrency.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>re正则表达式</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;贪婪 非贪婪模式&lt;/h2&gt;

&lt;h2 id=&quot;python-re&quot;&gt;python re模块&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 查找汉字 re.findall(ur&#39;[\u4e00-\u9fa5]+&#39;, word.decode(&#39;utf8&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;re.search(pattern, string, flags=0)&lt;/p&gt;

    &lt;p&gt;返回 match object 或者 None, match object可使用group()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.match(pattern, string, flags=0)&lt;/p&gt;

    &lt;p&gt;只有在0位置匹配成功的话才有返回, 返回match object 或者 None&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.fullmatch(pattern, string, flags=0)&lt;/p&gt;

    &lt;p&gt;py3才有&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.split(pattern, string, maxsplit=0, flags=0)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.findall(pattern, string, flags=0)&lt;/p&gt;

    &lt;p&gt;返回数组&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.finditer(pattern, string, flags=0)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.sub(pattern, repl, string, count=0, flags=0)&lt;/p&gt;

    &lt;p&gt;正则的替换&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.subn(pattern, repl, string, count=0, flags=0)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;re.escape(pattern)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;常用正则&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ip:port的匹配&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;手机号匹配 &lt;a href=&quot;https://github.com/VincentSit/ChinaMobilePhoneNumberRegex&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  pattern = (r&quot;^(?=\d{11}$)^1(?:3\d|4[57]|5[^4\D]|66|7[^249\D]|8\d|9[89])\d{8}$&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 May 2018 09:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/19/re.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/19/re.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>HTTP</title>
        <description>&lt;ul&gt;
  &lt;li&gt;0.2 算法&lt;/li&gt;
  &lt;li&gt;0.3 python(进程线程 装饰器 迭代器生成器)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;0.4 书(兼职of)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;http(cookie&amp;amp;session get&amp;amp;post&amp;amp;head&amp;amp;.. osi tcp三次四次)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;1.1 tcp(tcp粘包 time_wait)&lt;/li&gt;
  &lt;li&gt;1.2 tcpdump&lt;/li&gt;
  &lt;li&gt;1.3. nginx&lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;mysql(索引结构类型 优化 分布式问题)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;linux(&lt;a href=&quot;https://mp.weixin.qq.com/s/teB7KCaid8aZxuPeIOLZUA&quot;&gt;监控&lt;/a&gt;)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;分布式问题 解决&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;X-Forwarded-For ???&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dns-over-tls&quot;&gt;dns(应用层) over tls(安全传输层协议)&lt;/h3&gt;

&lt;h3 id=&quot;get-post-head-put-delete-options-trace&quot;&gt;get post head put delete options trace&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;post提交数据方式 form-data&lt;/td&gt;
          &lt;td&gt;x-www-form-urlencoded&lt;/td&gt;
          &lt;td&gt;binary&lt;/td&gt;
          &lt;td&gt;raw(Text&lt;/td&gt;
          &lt;td&gt;text/plain&lt;/td&gt;
          &lt;td&gt;application/json&lt;/td&gt;
          &lt;td&gt;application/javascript&lt;/td&gt;
          &lt;td&gt;application&lt;/td&gt;
          &lt;td&gt;xml&lt;/td&gt;
          &lt;td&gt;text/xml&lt;/td&gt;
          &lt;td&gt;text/html)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;python requests库使用,加header requests.post(url, data=raw_data, headers={‘Content-Type’: ‘application/x-www-form-urlencoded’})&lt;/p&gt;

    &lt;p&gt;高级用法&lt;a href=&quot;http://docs.python-requests.org/zh_CN/latest/user/advanced.html#advanced&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcp-3-4-timewait&quot;&gt;tcp 3次握手 4次挥手 TIMEWAIT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;3次握手是建立连接时:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4次挥手是结束连接时:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tcp&quot;&gt;tcp粘包的问题&lt;/h3&gt;

&lt;h3 id=&quot;tcp-&quot;&gt;tcp拥塞控制 慢启动&lt;/h3&gt;

&lt;h1 id=&quot;section&quot;&gt;编解码&lt;/h1&gt;
&lt;p&gt;## Unicode UTF8 ASCII GBK&lt;/p&gt;

&lt;h1 id=&quot;osiopen-system-interconnection&quot;&gt;osi(open system interconnection)七层模型:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;从下到上依次为:&lt;/p&gt;

    &lt;p&gt;物理层(物理设备,光纤) 链路层(交换机) 网络层(ip,网关,路由器) 传输层(端口,tcp udp) 会话层 表示层(编码解码,安全,压缩) 应用层(http ftp dns)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;https&quot;&gt;https原理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https = http + ssl/tls&lt;/p&gt;

    &lt;p&gt;ssl(socket security layer)/tls(transport layer security) 传输层安全协议&lt;/p&gt;

    &lt;p&gt;1.client发起请求,server返回证书及公钥
2.client产生随机密钥(用来对称加密通信).client使用公钥对该随机数加密,然后发送给server
3.server通过私钥对该报文解密,使用该随机数进行通信
4.之后的通信使用对称加密&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;charles&quot;&gt;charles抓包原理&lt;/h3&gt;
</description>
        <pubDate>Wed, 16 May 2018 10:30:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/16/http.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/16/http.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>HTTP-code</title>
        <description>&lt;h1 id=&quot;httpsblogcsdnnethuwei2003articledetails70139062&quot;&gt;状态码 &lt;a href=&quot;https://blog.csdn.net/huwei2003/article/details/70139062&quot;&gt;参考&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;304 未修改: 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。服务器可以告诉 Googlebot 自从上次抓取后网页没有变更，进而节省带宽和开销。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http(s)请求中经常可以看到各类状态码,详解如下&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  REASON_PHRASES = {
      100: &#39;CONTINUE&#39;,
      101: &#39;SWITCHING PROTOCOLS&#39;,
      102: &#39;PROCESSING&#39;,

      # 请求没问题,实体的主体部分包含了所请求的资源
      200: &#39;OK&#39;,

      201: &#39;CREATED&#39;,
      202: &#39;ACCEPTED&#39;,
      203: &#39;NON-AUTHORITATIVE INFORMATION&#39;,
      204: &#39;NO CONTENT&#39;,
      205: &#39;RESET CONTENT&#39;,

      # 成功执行了一个部分或range请求
      206: &#39;PARTIAL CONTENT&#39;,

      207: &#39;MULTI-STATUS&#39;,
      208: &#39;ALREADY REPORTED&#39;,
      226: &#39;IM USED&#39;,
      300: &#39;MULTIPLE CHOICES&#39;,

      # 永久重定向
      301: &#39;MOVED PERMANENTLY&#39;,

      # 临时重定向
      302: &#39;FOUND&#39;,

      303: &#39;SEE OTHER&#39;,

      # 客户端get请求,而最近资源未被修改,可用来说明资源未被修改.
        响应不应该包含实体的主体部分(不会返回网页内容,自从上次抓取后网页没有变更,
        进而节省带宽和开销)
      304: &#39;NOT MODIFIED&#39;,

      305: &#39;USE PROXY&#39;,
      306: &#39;RESERVED&#39;,
      307: &#39;TEMPORARY REDIRECT&#39;,
      308: &#39;PERMANENT REDIRECT&#39;,
      400: &#39;BAD REQUEST&#39;,
      401: &#39;UNAUTHORIZED&#39;,
      402: &#39;PAYMENT REQUIRED&#39;,
      403: &#39;FORBIDDEN&#39;,
      404: &#39;NOT FOUND&#39;,
      405: &#39;METHOD NOT ALLOWED&#39;,
      406: &#39;NOT ACCEPTABLE&#39;,
      407: &#39;PROXY AUTHENTICATION REQUIRED&#39;,
      408: &#39;REQUEST TIMEOUT&#39;,
      409: &#39;CONFLICT&#39;,
      410: &#39;GONE&#39;,
      411: &#39;LENGTH REQUIRED&#39;,
      412: &#39;PRECONDITION FAILED&#39;,
      413: &#39;REQUEST ENTITY TOO LARGE&#39;,
      414: &#39;REQUEST-URI TOO LONG&#39;,
      415: &#39;UNSUPPORTED MEDIA TYPE&#39;,
      416: &#39;REQUESTED RANGE NOT SATISFIABLE&#39;,
      417: &#39;EXPECTATION FAILED&#39;,
      418: &quot;I&#39;M A TEAPOT&quot;,
      422: &#39;UNPROCESSABLE ENTITY&#39;,
      423: &#39;LOCKED&#39;,
      424: &#39;FAILED DEPENDENCY&#39;,
      426: &#39;UPGRADE REQUIRED&#39;,
      428: &#39;PRECONDITION REQUIRED&#39;,
      429: &#39;TOO MANY REQUESTS&#39;,
      431: &#39;REQUEST HEADER FIELDS TOO LARGE&#39;,
      500: &#39;INTERNAL SERVER ERROR&#39;,

      # 客户端发起的请求超出服务器的能力范围(比如,使用了服务器不支持的请求方法)
      501: &#39;NOT IMPLEMENTED&#39;,

      # 网关错误,找不到后端服务
      502: &#39;BAD GATEWAY&#39;,

      # 一般是服务器有bug
      503: &#39;SERVICE UNAVAILABLE&#39;,

      # 服务器处理时间太长,超时
      504: &#39;GATEWAY TIMEOUT&#39;,

      505: &#39;HTTP VERSION NOT SUPPORTED&#39;,
      506: &#39;VARIANT ALSO NEGOTIATES&#39;,
      507: &#39;INSUFFICIENT STORAGE&#39;,
      508: &#39;LOOP DETECTED&#39;,
      510: &#39;NOT EXTENDED&#39;,
      511: &#39;NETWORK AUTHENTICATION REQUIRED&#39;,
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 16 May 2018 10:30:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/16/http-code.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/16/http-code.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>基础数据结构</title>
        <description>&lt;h1 id=&quot;jumphttpsalgorithmyuanbinmezh-hansbasicsdatastructurestringhtml&quot;&gt;数据结构&lt;a href=&quot;https://algorithm.yuanbin.me/zh-hans/basics_data_structure/string.html&quot;&gt;jump&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;str线程安全: 线程安全就是多线程访问时，采用了加锁机制; 线程不安全: 有可能出现多个线程先后更改数据造成所得到的数据是脏数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;可以尝试实现如下结构:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;heap; 优先队列; 霍夫曼压缩编码;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;一些问题:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;最小生成树问题&lt;/li&gt;
  &lt;li&gt;单源最短路径&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;堆&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;从存储结构上来说,堆是链表存储的; 从逻辑结构上来说,堆是一颗完全二叉树. 构建堆的时候即创建一个链表, 但是要满足 a[k] &amp;lt;= a[2&lt;em&gt;k+1] &amp;amp; a[k] &amp;lt;= a[2&lt;/em&gt;k+2]&lt;/li&gt;
  &lt;li&gt;优先队列可以使用堆结构来实现; 双端队列实现 collections.deque&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;栈&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;collections.deque()&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;set&quot;&gt;set&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Python的set跟dict的Implementation方式类似， 可以认为set是只有key的dict. set可进行比较&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  a = {x for x in &#39;abracadabra&#39; if x not in &#39;abc&#39;}
  isinstance(a, set)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;哈希表&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;散列表,python中即dict. 哈希冲突 f(k1)==f(k2),解决办法:开发定址法和链地址法. 查找或者插入的情况在大多数情况下可以达到O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;图&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;图的表示通常使用邻接矩阵和邻接表&lt;/li&gt;
  &lt;li&gt;邻接矩阵: 逻辑结构分为两部分：V和E集合。因此，用一个一维数组存放图中所有顶点数据；用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;链表操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 单向链表反转:
def reverse(self, head):
	prev = None
	while head.next:
		temp = head.next
		head.next = prev
		prev = head
		head = temp

	return prev

# 链表有环
def has_circle(self, head):
	fast = head
	slow = head
	while (flast and slow):
		fast = fast.next
		slow = slow.next
		if fast:
			fast = fast.next
		if fast == slow:
			break
	if fast and slow and fast == slow:
		return true
	else:
		return false

# 双向链表反转
def dreverse(self, head):
	curt = None
	while head:
		curt = head
		head = curt.next
		curt.next = curt.prev
		curt.prev = head
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;二叉树&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Node():
	def __init__(self, item):
		self.item = item
		self.left = None
		self.right = None

class BinTree():
	def __init__(self):
		self.root = None

	def add(self, item):
		node = Node(item)
		if self.root is None:
			self.root = node
			return

		q = [self.root]
		while True:
			pop_node = q.pop(0)
			if pop_node.left is None:
				pop_node.left = node
				return

			if pop_node.right is None:
				pop_node.right = node
				return

			q.append(pop_node.left)
			q.append(pop_node.right)

	def traverse(self):
		if self.root is None:
			return []

		res = [self.root.item]
		q = [self.root]
		while q != []:
			pop_node = q.pop(0)
			if pop_node.left:
				q.append(pop_node.left)
				res.append(pop_node.left.item)

			if pop_node.right:
				q.append(pop_node.right)
				res.append(pop_node.right.item)

		return res

	def preorder(self, root):
		if root is None:
			return []

		f = [root.item]
		m = self.preorder(root.left)
		e = self.preorder(root.right)

		return f + m + e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 16 May 2018 10:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/16/struct.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/16/struct.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>middle algorithm</title>
        <description>&lt;h3 id=&quot;httpsalgorithmyuanbinmezh-hansbasicsalgorithmdivideandconquerhtml&quot;&gt;一些算法思想 &lt;a href=&quot;https://algorithm.yuanbin.me/zh-hans/basics_algorithm/divide_and_conquer.html&quot;&gt;参考&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Generate nth prime number in Python&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  def find_primes(limit):
      nums = [True] * (limit + 1)
      nums[0] = nums[1] = False

      for (i, is_prime) in enumerate(nums):
          if is_prime:
              yield i
              for n in range(i * i, limit + 1, i):
                  nums[n] = False


  def find_n_prime(n):
      for i in range(n, (n * n) + 1, n):
          primes = list(find_primes(i))
          if len(primes) &amp;gt;= n:
              return primes[n - 1]


  print(find_n_prime(5))
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;问题及解决办法&lt;/h3&gt;

</description>
        <pubDate>Wed, 16 May 2018 10:00:00 +0800</pubDate>
        <link>/jekyll/update/2018/05/16/algorithm-middle.html</link>
        <guid isPermaLink="true">/jekyll/update/2018/05/16/algorithm-middle.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
